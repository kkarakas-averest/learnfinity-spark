import { supabase } from '@/lib/supabase';
import { fileURLToPath } from 'url';

/**
 * Service to fetch and prepare courses generated by agents for display
 */
const courseDisplayService = {
  /**
   * Fetch agent-generated courses for a specific learner
   * 
   * @param {string} learnerId - The ID of the learner
   * @returns {Promise<Object>} Learner's personalized courses and learning path
   */
  async fetchAgentGeneratedCourses(learnerId) {
    try {
      // Find the employee record for this user
      const { data: employeeData, error: employeeError } = await supabase
        .from('hr_employees')
        .select('id, employee_id, name, learning_path_id')
        .eq('employee_id', learnerId)
        .single();
        
      if (employeeError) {
        // If no employee record, this user might not have agent-generated content
        return {
          success: false,
          message: 'No employee profile found',
          courses: [],
          learningPath: null
        };
      }
      
      // Check if there's a local JSON file for the learning path
      // In a full implementation, this would fetch from a database
      // For this example, we'll try to read from our local filesystem via Supabase
      const { data: fileData, error: fileError } = await supabase.storage
        .from('agent-data')
        .download(`learning_path_${learnerId}.json`);
      
      let learningPath = null;
      let courses = [];
      
      if (!fileError && fileData) {
        // Parse the learning path JSON
        const text = await fileData.text();
        learningPath = JSON.parse(text);
        
        // Fetch associated course content
        for (const course of learningPath.recommended_courses || []) {
          const courseId = course.course_id;
          
          // Try to fetch course content from storage
          const { data: courseFileData, error: courseFileError } = await supabase.storage
            .from('agent-data')
            .download(`course_content_${courseId}.json`);
            
          if (!courseFileError && courseFileData) {
            // Parse the course content
            const courseText = await courseFileData.text();
            const courseContent = JSON.parse(courseText);
            
            courses.push({
              id: courseId,
              title: course.title,
              description: course.description,
              content: courseContent,
              estimatedDuration: course.estimated_duration,
              modules: courseContent.modules || []
            });
          } else {
            // Create a placeholder if course content not available
            courses.push({
              id: courseId,
              title: course.title,
              description: course.description,
              content: null,
              estimatedDuration: course.estimated_duration,
              modules: [],
              isPlaceholder: true
            });
          }
        }
      } else {
        // Fallback: Query the database directly for courses generated for this learner
        const { data: coursesData, error: coursesError } = await supabase
          .from('agent_generated_courses')
          .select('*')
          .eq('employee_id', learnerId);
          
        if (!coursesError && coursesData) {
          courses = coursesData;
        }
      }
      
      return {
        success: true,
        courses,
        learningPath,
        employeeProfile: employeeData
      };
    } catch (error) {
      console.error('Error fetching agent-generated courses:', error);
      return {
        success: false,
        message: error.message || 'Failed to fetch courses',
        courses: [],
        learningPath: null
      };
    }
  },
  
  /**
   * Fetch a specific course's content
   * 
   * @param {string} courseId - The ID of the course
   * @returns {Promise<Object>} The course content
   */
  async fetchCourseContent(courseId) {
    try {
      // Try to fetch from storage
      const { data: fileData, error: fileError } = await supabase.storage
        .from('agent-data')
        .download(`course_content_${courseId}.json`);
        
      if (!fileError && fileData) {
        // Parse the course content
        const text = await fileData.text();
        return {
          success: true,
          course: JSON.parse(text)
        };
      }
      
      // Fallback: Try database query
      const { data: courseData, error: courseError } = await supabase
        .from('agent_generated_courses')
        .select('*')
        .eq('id', courseId)
        .single();
        
      if (courseError) {
        throw new Error('Course not found');
      }
      
      return {
        success: true,
        course: courseData
      };
    } catch (error) {
      console.error('Error fetching course content:', error);
      return {
        success: false,
        message: error.message || 'Failed to fetch course content',
        course: null
      };
    }
  },
  
  /**
   * Update learner progress on an agent-generated course
   * 
   * @param {string} learnerId - The ID of the learner
   * @param {string} courseId - The ID of the course
   * @param {string} moduleId - The ID of the module
   * @param {Object} progress - Progress information
   * @returns {Promise<Object>} Result of the update
   */
  async updateCourseProgress(learnerId, courseId, moduleId, progress) {
    try {
      const { data, error } = await supabase
        .from('learner_progress')
        .upsert({
          learner_id: learnerId,
          course_id: courseId,
          module_id: moduleId,
          status: progress.status,
          completed_at: progress.completed ? new Date().toISOString() : null,
          score: progress.score,
          updated_at: new Date().toISOString()
        })
        .select()
        .single();
        
      if (error) throw error;
      
      return {
        success: true,
        progress: data
      };
    } catch (error) {
      console.error('Error updating course progress:', error);
      return {
        success: false,
        message: error.message || 'Failed to update progress'
      };
    }
  }
};

export default courseDisplayService; 